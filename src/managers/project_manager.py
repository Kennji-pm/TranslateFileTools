import os
import shutil
import datetime
from typing import List, Optional

class ProjectManager:
    def __init__(self, config_manager):
        self.config_manager = config_manager
        self.temp_folders = []

        # Ensure project root and projects folder exist
        os.makedirs(self.config_manager.project_root, exist_ok=True)
        os.makedirs(self.config_manager.projects_folder, exist_ok=True)

    def create_project_folder(self, base_name: str) -> str:
        """T·∫°o th∆∞ m·ª•c d·ª± √°n m·ªõi d·ª±a tr√™n t√™n file v√† th·ªùi gian"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        project_name = f"{base_name}_{timestamp}"
        project_path = os.path.join(self.config_manager.projects_folder, project_name)

        for subfolder in ["original", "chunks", "translated"]:
            os.makedirs(os.path.join(project_path, subfolder), exist_ok=True)

        return project_path

    def list_translatable_files(self, directory: str, translation_errors: List[str]) -> List[str]:
        """Li·ªát k√™ c√°c file YAML v√† JSON trong th∆∞ m·ª•c"""
        if not os.path.exists(directory):
            return []
        try:
            files = [f for f in os.listdir(directory)
                       if os.path.isfile(os.path.join(directory, f)) and f.endswith((".yml", ".yaml", ".json"))]
            return sorted(files)
        except OSError as e:
            translation_errors.append(f"‚ùå Kh√¥ng th·ªÉ truy c·∫≠p th∆∞ m·ª•c {directory}: {e}")
            return []

    def view_projects(self, ui_manager):
        """Xem danh s√°ch c√°c d·ª± √°n ƒë√£ t·∫°o"""
        ui_manager.print_header("Danh s√°ch th∆∞ m·ª•c d·ª± √°n")

        if not os.path.exists(self.config_manager.projects_folder):
            print("üìÇ Ch∆∞a c√≥ th∆∞ m·ª•c d·ª± √°n n√†o ƒë∆∞·ª£c t·∫°o.")
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return

        try:
            projects = [d for d in os.listdir(self.config_manager.projects_folder)
                        if os.path.isdir(os.path.join(self.config_manager.projects_folder, d))]
        except OSError as e:
            print(f"‚ùå Kh√¥ng th·ªÉ truy c·∫≠p th∆∞ m·ª•c d·ª± √°n t·∫°i '{self.config_manager.projects_folder}': {e}")
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return

        if not projects:
            print("üìÇ Ch∆∞a c√≥ th∆∞ m·ª•c d·ª± √°n n√†o ƒë∆∞·ª£c t·∫°o.")
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return

        try:
            projects.sort(key=lambda x: os.path.getmtime(os.path.join(self.config_manager.projects_folder, x)), reverse=True)
        except OSError:
            print("‚ö†Ô∏è L·ªói khi s·∫Øp x·∫øp d·ª± √°n theo th·ªùi gian, hi·ªÉn th·ªã theo th·ª© t·ª± m·∫∑c ƒë·ªãnh.")

        print(f"üîç T√¨m th·∫•y {len(projects)} th∆∞ m·ª•c d·ª± √°n trong '{self.config_manager.projects_folder}':")
        for i, project_name in enumerate(projects):
            project_path = os.path.join(self.config_manager.projects_folder, project_name)
            try:
                created_time = datetime.datetime.fromtimestamp(os.path.getmtime(project_path))
                
                original_dir = os.path.join(project_path, "original")
                translated_dir = os.path.join(project_path, "translated")
                
                original_files_count = len(os.listdir(original_dir)) if os.path.exists(original_dir) and os.path.isdir(original_dir) else 0
                translated_files_count = len(os.listdir(translated_dir)) if os.path.exists(translated_dir) and os.path.isdir(translated_dir) else 0

                print(f"\n[{i+1}] {project_name}")
                print(f"    üìÖ L·∫ßn s·ª≠a ƒë·ªïi cu·ªëi: {created_time.strftime('%d/%m/%Y %H:%M:%S')}")
                print(f"    üìÑ File g·ªëc: {original_files_count}, File d·ªãch: {translated_files_count}")
            except OSError:
                print(f"\n[{i+1}] {project_name} (kh√¥ng th·ªÉ truy c·∫≠p chi ti·∫øt)")
            print("-" * 50)

        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

    def delete_projects(self, ui_manager):
        """X√≥a m·ªôt ho·∫∑c nhi·ªÅu th∆∞ m·ª•c d·ª± √°n"""
        ui_manager.print_header("X√≥a th∆∞ m·ª•c d·ª± √°n")

        if not os.path.exists(self.config_manager.projects_folder):
            print("üìÇ Ch∆∞a c√≥ th∆∞ m·ª•c d·ª± √°n n√†o ƒë∆∞·ª£c t·∫°o ƒë·ªÉ x√≥a.")
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return

        try:
            projects = [d for d in os.listdir(self.config_manager.projects_folder)
                        if os.path.isdir(os.path.join(self.config_manager.projects_folder, d))]
            if not projects:
                print(f"üìÇ Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c d·ª± √°n n√†o trong '{self.config_manager.projects_folder}'.")
                input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                return
            projects.sort(key=lambda x: os.path.getmtime(os.path.join(self.config_manager.projects_folder, x)), reverse=True)
        except OSError as e:
            print(f"‚ùå Kh√¥ng th·ªÉ truy c·∫≠p th∆∞ m·ª•c d·ª± √°n t·∫°i '{self.config_manager.projects_folder}': {e}")
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            return

        max_display_project_count = self.config_manager.get_max_display_project_count()
        num_total_projects = len(projects)
        print(f"\nüìã DANH S√ÅCH TH∆Ø M·ª§C D·ª∞ √ÅN trong '{self.config_manager.projects_folder}':")
        for i in range(min(num_total_projects, max_display_project_count)):
            project = projects[i]
            project_path_full = os.path.join(self.config_manager.projects_folder, project) 
            try:
                created_time = datetime.datetime.fromtimestamp(os.path.getmtime(project_path_full))
                print(f"[{i+1}] {project} - (S·ª≠a ƒë·ªïi l·∫ßn cu·ªëi: {created_time.strftime('%d/%m/%Y %H:%M:%S')})")
            except OSError:
                 print(f"[{i+1}] {project} - (Kh√¥ng th·ªÉ ƒë·ªçc th·ªùi gian)")
        
        if num_total_projects > max_display_project_count:
            remaining_count = num_total_projects - max_display_project_count
            print(f"...c√≤n {remaining_count} d·ª± √°n kh√°c.")

        print("\nüí° Ch·ªçn nhi·ªÅu th∆∞ m·ª•c d·ª± √°n b·∫±ng c√°ch nh·∫≠p c√°c s·ªë, c√°ch nhau b·ªüi d·∫•u ph·∫©y (,)")
        print("   V√≠ d·ª•: 1,3,5 s·∫Ω ch·ªçn m·ª•c 1, 3 v√† 5.")
        print("   Nh·∫≠p 'all' ƒë·ªÉ ch·ªçn t·∫•t c·∫£ c√°c th∆∞ m·ª•c d·ª± √°n ƒë∆∞·ª£c li·ªát k√™.")

        try:
            choice_str = input("\nüî¢ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (ho·∫∑c 'q' ƒë·ªÉ quay l·∫°i): ").strip().lower()
            if choice_str == 'q': return

            projects_to_delete_names = []
            if choice_str == 'all':
                projects_to_delete_names = projects
            else:
                selected_indices = [int(idx.strip()) - 1 for idx in choice_str.split(',') if idx.strip()]
                for idx in selected_indices:
                    if 0 <= idx < len(projects):
                        projects_to_delete_names.append(projects[idx])
                    else:
                        print(f"‚ö†Ô∏è B·ªè qua s·ªë kh√¥ng h·ª£p l·ªá trong l·ª±a ch·ªçn: {idx+1}")

            if not projects_to_delete_names:
                print("‚ùå Kh√¥ng c√≥ th∆∞ m·ª•c d·ª± √°n n√†o ƒë∆∞·ª£c ch·ªçn h·ª£p l·ªá ƒë·ªÉ x√≥a.")
                input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                return

            print("\n‚ö†Ô∏è C√°c th∆∞ m·ª•c d·ª± √°n sau v√† TO√ÄN B·ªò N·ªòI DUNG B√äN TRONG s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn:")
            for project_name_del in projects_to_delete_names: print(f"  - {project_name_del} (trong {self.config_manager.projects_folder})")

            confirm = input("\nüõë C·∫¢NH B√ÅO: Thao t√°c n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC! B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a? (y/n): ").lower()
            if confirm != 'y':
                print("‚ùå H·ªßy thao t√°c x√≥a.")
                input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                return

            deleted_count = 0
            error_count = 0
            print("\nüóëÔ∏è  ƒêang ti·∫øn h√†nh x√≥a...")
            for project_name_final_del in projects_to_delete_names:
                project_path_to_delete = os.path.join(self.config_manager.projects_folder, project_name_final_del)
                try:
                    shutil.rmtree(project_path_to_delete)
                    print(f"  ‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c d·ª± √°n: {project_name_final_del}")
                    deleted_count += 1
                except Exception as e:
                    print(f"  ‚ùå L·ªói khi x√≥a th∆∞ m·ª•c d·ª± √°n {project_name_final_del}: {str(e)}")
                    error_count += 1

            print(f"\nüßπ Ho√†n t·∫•t: ƒê√£ x√≥a {deleted_count} th∆∞ m·ª•c d·ª± √°n, {error_count} l·ªói.")
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p danh s√°ch s·ªë h·ª£p l·ªá ho·∫∑c 'all'/'q'.")
            input("\nNh·∫•n Enter ƒë·ªÉ th·ª≠ l·∫°i...")
        except Exception as e_outer:
            print(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh x√≥a: {e_outer}")
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

    def cleanup_temp_folders(self):
        """D·ªçn d·∫πp c√°c th∆∞ m·ª•c t·∫°m th·ªùi (chunks are now in project folders, this might be less used or repurposed)"""
        cleaned_count = 0
        for folder in self.temp_folders:
            if os.path.exists(folder):
                try:
                    shutil.rmtree(folder)
                    cleaned_count +=1
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c t·∫°m {folder}: {str(e)}")
        if cleaned_count > 0:
            print(f"üßπ ƒê√£ d·ªçn d·∫πp {cleaned_count} th∆∞ m·ª•c t·∫°m th·ªùi.")
        self.temp_folders = []
