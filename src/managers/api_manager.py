import os
import sys
from typing import List, Optional
from google import genai
from colorama import Fore

class APIManager:
    def __init__(self, config_manager):
        self.config_manager = config_manager
        self.model: Optional[genai.Client] = None
        self._configure_genai_with_primary_key()

    def _configure_genai_with_primary_key(self):
        """Configures the global genai object with the primary API key."""
        api_keys = self.config_manager.get_api_keys()
        if not api_keys:
            self.model = None
            print("‚ö†Ô∏è Kh√¥ng c√≥ API key n√†o ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ c·∫•u h√¨nh.")
            return

        primary_key = api_keys[0]
        try:
            self.model = genai.Client(api_key=primary_key)
            key_display = f"...{primary_key[-4:]}" if len(primary_key) > 4 else primary_key
            print(f"‚öôÔ∏è  Gemini API ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng key ch√≠nh k·∫øt th√∫c b·∫±ng: {key_display}")
            print(f"   Model s·ª≠ d·ª•ng: gemini-2.0-flash")
        except Exception as e:
            self.model = None
            key_display = f"...{primary_key[-4:]}" if len(primary_key) > 4 else primary_key
            print(f"‚ùå L·ªói khi c·∫•u h√¨nh Gemini API v·ªõi key {key_display}: {str(e)}")
            print("   Vui l√≤ng ki·ªÉm tra API key v√† th·ª≠ l·∫°i.")

    def get_model(self):
        return self.model

    def _display_api_keys(self):
        """Hi·ªÉn th·ªã danh s√°ch c√°c API key hi·ªán c√≥."""
        api_keys = self.config_manager.get_api_keys()
        if api_keys:
            print(f"üîë C√°c API key hi·ªán c√≥:")
            for i, key in enumerate(api_keys):
                key_display = f"...{key[-4:]}" if len(key) > 4 else key
                status = f" (ƒêang s·ª≠ d·ª•ng)" if i == 0 else ""
                print(f"  [{i+1}] {key_display}{status}")
        else:
            print(f"üîë Ch∆∞a c√≥ API key n√†o ƒë∆∞·ª£c c·∫•u h√¨nh.")

    def configure_api_interactively(self, ui_manager):
        while True:
            ui_manager.print_header("C·∫•u H√¨nh API Key")
            self._display_api_keys()

            print(f"\nCh·ªçn h√†nh ƒë·ªông:")
            print(f"  [1] Th√™m API key m·ªõi")
            if self.config_manager.get_api_keys():
                print(f"  [2] Ch·ªçn m·ªôt API key hi·ªán c√≥ ƒë·ªÉ s·ª≠ d·ª•ng ch√≠nh")
                print(f"  [3] X√≥a API key")
            print(f"  [0] Quay l·∫°i menu ch√≠nh")
            print(f"{'-' * 30}")

            choice = input(f"Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ").strip().lower()

            if choice == '0':
                break
            elif choice == '1':
                new_keys_str = input(f"Nh·∫≠p API key m·ªõi (c√≥ th·ªÉ nh·∫≠p nhi·ªÅu, c√°ch nhau b·∫±ng d·∫•u ph·∫©y ','):\n> ").strip()
                if new_keys_str:
                    new_keys = [k.strip() for k in new_keys_str.split(',') if k.strip()]
                    current_keys = self.config_manager.get_api_keys()
                    added_count = 0
                    for nk in new_keys:
                        if nk not in current_keys:
                            current_keys.append(nk)
                            added_count += 1
                    if added_count > 0:
                        self.config_manager.set_api_keys(current_keys)
                        print(f"‚úÖ ƒê√£ th√™m {added_count} API key m·ªõi.")
                        self._configure_genai_with_primary_key()
                    else:
                        print(f"‚ÑπÔ∏è Kh√¥ng c√≥ key m·ªõi n√†o ƒë∆∞·ª£c th√™m (c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i).")
                else:
                    print(f"‚ö†Ô∏è Kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c nh·∫≠p.")
                input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                
            elif choice == '2' and self.config_manager.get_api_keys():
                if len(self.config_manager.get_api_keys()) == 1:
                    print(f"‚ÑπÔ∏è Ch·ªâ c√≥ m·ªôt API key, kh√¥ng c·∫ßn ch·ªçn l·∫°i.")
                    input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    continue
                
                try:
                    ui_manager.print_header("Ch·ªçn API Key Ch√≠nh")
                    self._display_api_keys()
                    key_index_str = input(f"\nNh·∫≠p s·ªë th·ª© t·ª± c·ªßa API key mu·ªën s·ª≠ d·ª•ng l√†m ch√≠nh (1-{len(self.config_manager.get_api_keys())}): ").strip()
                    selected_idx = int(key_index_str) - 1
                    current_keys = self.config_manager.get_api_keys()
                    if 0 <= selected_idx < len(current_keys):
                        selected_key = current_keys.pop(selected_idx)
                        current_keys.insert(0, selected_key)
                        self.config_manager.set_api_keys(current_keys)
                        print(f"‚úÖ ƒê√£ ƒë·∫∑t key '{f'...{selected_key[-4:]}' if len(selected_key) > 4 else selected_key}' l√†m key ch√≠nh.")
                        self._configure_genai_with_primary_key()
                    else:
                        print(f"‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë trong danh s√°ch.")
                except ValueError:
                    print(f"‚ùå ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë.")
                input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

            elif choice == '3' and self.config_manager.get_api_keys():
                if not self.config_manager.get_api_keys():
                    print(f"‚ÑπÔ∏è Kh√¥ng c√≥ API key n√†o ƒë·ªÉ x√≥a.")
                    input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    continue

                while True:
                    ui_manager.print_header("X√≥a API Key")
                    self._display_api_keys()
                    print(f"\nüí° Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa API key mu·ªën x√≥a (c√≥ th·ªÉ nh·∫≠p nhi·ªÅu, c√°ch nhau b·∫±ng d·∫•u ph·∫©y ',').")
                    print(f"   C·∫¢NH B√ÅO: Kh√¥ng th·ªÉ ho√†n t√°c.")
                    delete_choice = input(f"Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (ho·∫∑c 'q' ƒë·ªÉ quay l·∫°i): ").strip().lower()

                    if delete_choice == 'q':
                        break

                    try:
                        indices_to_delete = []
                        valid_input = True
                        current_keys = self.config_manager.get_api_keys()
                        for x in delete_choice.split(','):
                            x_strip = x.strip()
                            if x_strip:
                                num = int(x_strip) - 1
                                if 0 <= num < len(current_keys):
                                    indices_to_delete.append(num)
                                else:
                                    print(f"‚ö†Ô∏è B·ªè qua s·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá: {num + 1}.")
                                    valid_input = False
                        
                        if not indices_to_delete:
                            if valid_input:
                                print(f"‚ÑπÔ∏è Kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ x√≥a.")
                            input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                            continue

                        indices_to_delete = sorted(list(set(indices_to_delete)), reverse=True)

                        print(f"\n‚ö†Ô∏è B·∫°n s·∫Øp x√≥a c√°c API key sau:")
                        for idx in indices_to_delete:
                            key_display = f"...{current_keys[idx][-4:]}" if len(current_keys[idx]) > 4 else current_keys[idx]
                            print(f"  - [{idx+1}] {key_display}")
                        
                        confirm_delete = input(f"\nüõë X√ÅC NH·∫¨N X√ìA (y/n)? ").strip().lower()
                        if confirm_delete == 'y':
                            deleted_count = 0
                            for idx in indices_to_delete:
                                deleted_key = current_keys.pop(idx)
                                print(f"‚úÖ ƒê√£ x√≥a key: ...{deleted_key[-4:]}")
                                deleted_count += 1
                            
                            if deleted_count > 0:
                                self.config_manager.set_api_keys(current_keys)
                                self._configure_genai_with_primary_key()
                                print(f"üéâ Ho√†n t·∫•t x√≥a key.")
                            else:
                                print(f"‚ÑπÔ∏è Kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c x√≥a.")
                            input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                            break
                        else:
                            print(f"‚ùå ƒê√£ h·ªßy thao t√°c x√≥a.")
                            input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                            break

                    except ValueError:
                        print(f"‚ùå ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p c√°c s·ªë c√°ch nhau b·∫±ng d·∫•u ph·∫©y.")
                        input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            else:
                print(f"‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
                input(f"\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

        if not self.model:
            print(f"\n‚ùå C·∫•u h√¨nh API key kh√¥ng th√†nh c√¥ng ho·∫∑c kh√¥ng c√≥ key.")
            if input(f"Th·ª≠ l·∫°i c·∫•u h√¨nh API key? (y/n): ").lower() == 'y':
                return self.configure_api_interactively(ui_manager)
            else:
                print(f"‚õî Ch∆∞∆°ng tr√¨nh kh√¥ng th·ªÉ ho·∫°t ƒë·ªông m√† kh√¥ng c√≥ API key h·ª£p l·ªá.")
                sys.exit(1)
